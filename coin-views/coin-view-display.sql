-- latest version (live)
WITH CTE_PC AS (
    SELECT DISTINCT
        CHANNEL_NAME AS CHANNEL
        , PLANNING_CONTEXT_CODE
        , PLANNING_CONTEXT_NAME
        , CAMP_ID
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.ONLINEMARKETINGSTEUERUNG_CAMPID_TO_KAMEL_PLANNINGCONTEXT
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_PRIVATE.CAMPID_TO_KAMEL_PLANNINGCONTEXT
)

SELECT
    REPORTING_DATE
    , PLANNING_CONTEXT_CODE
    , PLANNING_CONTEXT_NAME
    , CHANNEL
    , CAMP_ID
    , SOURCE_SYSTEM
    , IMPRESSIONS
    , CLICKS
    , COST_EURO
    , CASE
        WHEN INSTR(CAMP_ID, '-TW.BC-') > 0 OR INSTR(CAMP_ID, '-PF.BC-') > 0 THEN 2
        WHEN
            INSTR(CAMP_ID, '-W.BC-') > 0
            OR INSTR(CAMP_ID, '-F.BC-') > 0
            OR (INSTR(CAMP_ID, '-SS.AG-') > 0 AND INSTR(CAMP_ID, '-D.C-') > 0)
            OR INSTR(CAMP_ID, '-SES.C-') > 0
            THEN 3
        ELSE 1
    END AS BUDGET_LOGIC
    , CASE
        WHEN LOCAL.BUDGET_LOGIC = 1 THEN 1
        WHEN LOCAL.BUDGET_LOGIC = 3 THEN 0
        WHEN INSTR(CAMP_ID, '.WS-') > 0 THEN 1 - REGEXP_SUBSTR(REGEXP_SUBSTR(CAMP_ID, '(\d+)\.WS'), '\d+') / 100
        WHEN INSTR(CAMP_ID, '.FS-') > 0 THEN 1 - REGEXP_SUBSTR(REGEXP_SUBSTR(CAMP_ID, '(\d+)\.FS'), '\d+') / 100
        ELSE NULL
    END AS BUDGET_LOGIC_SHARE
FROM (
    --Adition --> Planning-Context Fallback erstellen
    SELECT
        DAT.BUSINESS_DATE AS REPORTING_DATE
        , FIRST_VALUE(COALESCE(CTE_PC.CHANNEL, 'Display Advertising')) AS CHANNEL
        , STD.CAMPAIGN_ID AS CAMP_ID
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_CODE) AS PLANNING_CONTEXT_CODE
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_NAME) AS PLANNING_CONTEXT_NAME
        , '${EXAENV}_BIWC_SERVICE_CAMPAIGNDATA_PROV.MPC_ADITION_DISPLAY_PERFORMANCE' AS SOURCE_SYSTEM
        , SUM(DAT.DSP_IMPRESSIONS_BIDON) AS IMPRESSIONS
        , SUM(DAT.DSP_CLICKS) AS CLICKS
        , SUM(DAT.DSP_COSTS) AS COST_EURO
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.CAMPAIGNDATA_MPC_ADITION_DISPLAY_PERFORMANCE AS DAT 
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_ADITION_DISPLAY_PERFORMANCE AS DAT
    LEFT JOIN
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.ONLINEMARKETINGSTEUERUNG_MPC_ADITION_AD_IDENTIFIER_MAPPING AS STD
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_PRIVATE.MPC_ADITION_AD_IDENTIFIER_MAPPING AS STD
        ON DAT.BID = STD.BID
        AND STD.BANNER_KNOWN_UNTIL_UTC > CURRENT_DATE + 1
    LEFT JOIN
        CTE_PC
        ON STD.CAMPAIGN_ID = CTE_PC.CAMP_ID
    WHERE
        DAT.BUSINESS_DATE >= '2020-01-01'
        AND (COALESCE(DAT.DSP_IMPRESSIONS_BIDON, 0) + COALESCE(DAT.DSP_COSTS, 0) + COALESCE(DAT.DSP_CLICKS, 0)) != 0
        AND STD.CAMPAIGN_ID != '-1'
    GROUP BY
        LOCAL.REPORTING_DATE, LOCAL.CAMP_ID
    ------------------
    UNION ALL
    ------------------
    --Adition Partner
    SELECT
        DAT.BUSINESS_DATE AS REPORTING_DATE
        , FIRST_VALUE(COALESCE(CTE_PC.CHANNEL, 'Display Advertising')) AS CHANNEL
        , STD.CAMPAIGN_ID AS CAMP_ID
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_CODE) AS PLANNING_CONTEXT_CODE
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_NAME) AS PLANNING_CONTEXT_NAME
        , '${EXAENV}_BIWC_SERVICE_CAMPAIGNDATA_PROV.MPC_ADITION_DISPLAY_PARTNER_PERFORMANCE' AS SOURCE_SYSTEM
        , SUM(DAT.IMPRESSIONS) AS IMPRESSIONS
        , SUM(DAT.CLICKS) AS CLICKS
        , SUM(DAT.BUDGET) AS COST_EURO
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.ONLINEMARKETINGSTEUERUNG_MPC_ADITION_DISPLAY_PARTNER_PERFORMANCE_DATA AS DAT 
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_ADITION_DISPLAY_PARTNER_PERFORMANCE AS DAT
    LEFT JOIN
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.ONLINEMARKETINGSTEUERUNG_MPC_ADITION_AD_IDENTIFIER_MAPPING AS STD
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_PRIVATE.MPC_ADITION_AD_IDENTIFIER_MAPPING AS STD
        ON DAT.CAMP_ID = STD.CAMPAIGN_ID
        AND STD.BANNER_KNOWN_UNTIL_UTC > CURRENT_DATE + 1
    LEFT JOIN
        CTE_PC
        ON STD.CAMPAIGN_ID = CTE_PC.CAMP_ID
    WHERE
        DAT.BUSINESS_DATE >= '2020-01-01'
        AND (COALESCE(DAT.IMPRESSIONS, 0) + COALESCE(DAT.BUDGET, 0) + COALESCE(DAT.CLICKS, 0)) > 0
        AND STD.CAMPAIGN_ID != '-1'
    GROUP BY
        LOCAL.REPORTING_DATE, LOCAL.CAMP_ID
    ------------------
    UNION ALL
    ------------------
    --Google ACE --> OK!
    SELECT
        DAT.REPORTING_DATE
        , FIRST_VALUE(COALESCE(CTE_PC.CHANNEL, 'Display Advertising')) AS CHANNEL
        , DAT.CAMP_ID
        , FIRST_VALUE(COALESCE(CTE_PC.PLANNING_CONTEXT_CODE, 'G.MP-GAC.AS-RTG.BT-D.C')) AS PLANNING_CONTEXT_CODE
        , FIRST_VALUE(COALESCE(CTE_PC.PLANNING_CONTEXT_NAME, 'Retargeting Google ACe')) AS PLANNING_CONTEXT_NAME
        , '${EXAENV}_BIWC_SERVICE_CAMPAIGNDATA_PROV.MPC_GOOGLE_ADS_AD_PERFORMANCE' AS SOURCE_SYSTEM
        , SUM(DAT.IMPRESSIONS) AS IMPRESSIONS
        , SUM(DAT.CLICKS) AS CLICKS
        , SUM(DAT.COSTS_IN_EURO) AS COST_EURO
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.CAMPAIGNDATA_MPC_GOOGLE_ADS_AD_PERFORMANCE AS DAT
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_GOOGLE_ADS_AD_PERFORMANCE AS DAT
    LEFT JOIN
        CTE_PC
        ON DAT.CAMP_ID = CTE_PC.CAMP_ID
    WHERE
        DAT.GOOGLE_ACCOUNT_ID = 9540402182
        AND DAT.REPORTING_DATE >= '2020-01-01'
        AND (COALESCE(DAT.IMPRESSIONS, 0) + COALESCE(DAT.COSTS_IN_EURO, 0) + COALESCE(DAT.CLICKS, 0)) > 0
    GROUP BY
        DAT.REPORTING_DATE, DAT.CAMP_ID
    ------------------
    UNION ALL
    ------------------
    --GDN --> OK!
    SELECT
        DAT.DATE_COL AS REPORTING_DATE
        , FIRST_VALUE(COALESCE(CTE_PC.CHANNEL, 'Display Advertising')) AS CHANNEL
        , DAT.CAMP_ID
        , FIRST_VALUE(
            COALESCE(
                CTE_PC.PLANNING_CONTEXT_CODE
                , CASE
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'CLT') > 0 THEN 'G.MP-GD.AS-CLT.BT-D.C'
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'Retargeting') > 0 THEN 'G.MP-GD.AS-RTG.BT-D.C'
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'REW') > 0 THEN 'G.MP-GD.AS-REW.BT-D.C'
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'WKZ') > 0 THEN 'G.MP-GD.AS-REW.BT-D.C'
                END
            )
        ) AS PLANNING_CONTEXT_CODE
        , FIRST_VALUE(
            COALESCE(
                CTE_PC.PLANNING_CONTEXT_NAME
                , CASE
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'CLT') > 0 THEN 'CLT GDN'
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'Retargeting') > 0 THEN 'Retargeting GDN'
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'REW') > 0 THEN 'Reichweite GDN'
                    WHEN INSTR(DAT.GOOGLE_CAMPAIGN_NAME, 'WKZ') > 0 THEN 'Reichweite GDN'
                END
            )
        ) AS PLANNING_CONTEXT_NAME
        , '${EXAENV}_BIWC_SERVICE_CAMPAIGNDATA_PROV.MPC_GOOGLE_AD_PERFORMANCE_REPORT' AS SOURCE_SYSTEM
        , SUM(DAT.IMPRESSIONS) AS IMPRESSIONS
        , SUM(DAT.CLICKS) AS CLICKS
        , SUM(DAT.COST_EURO) AS COST_EURO
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.CAMPAIGNDATA_MPC_GOOGLE_AD_PERFORMANCE_REPORT AS DAT
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_GOOGLE_AD_PERFORMANCE_REPORT AS DAT
    LEFT JOIN
        CTE_PC
        ON DAT.CAMP_ID = CTE_PC.CAMP_ID
    WHERE
        DAT.DATE_COL >= '2020-01-01'
        AND (COALESCE(DAT.IMPRESSIONS, 0) + COALESCE(DAT.COST_EURO, 0) + COALESCE(DAT.CLICKS, 0)) > 0
        AND DAT.GOOGLE_ACCOUNT_ID = 1361841724
    GROUP BY
        LOCAL.REPORTING_DATE, DAT.CAMP_ID
    ------------------
    UNION ALL
    ------------------
    --ODIN
    SELECT
        DAT.REPORTING_DATE
        , FIRST_VALUE(COALESCE(CTE_PC.CHANNEL, 'Display Advertising')) AS CHANNEL
        , DAT.CAMP_ID
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_CODE) AS PLANNING_CONTEXT_CODE
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_NAME) AS PLANNING_CONTEXT_NAME
        , '${EXAENV}_BIWC_SERVICE_CAMPAIGNDATA_PROV.MPC_ODIN_AD_PERFORMANCE' AS SOURCE_SYSTEM
        , SUM(DAT.IMPRESSIONS) AS IMPRESSIONS
        , COALESCE(SUM(DAT.CLICKS), 0) AS CLICKS
        , SUM(DAT.NET_REVENUE_EURO) AS COST_EURO
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.CAMPAIGNDATA_MPC_ODIN_AD_PERFORMANCE AS DAT
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_ODIN_AD_PERFORMANCE AS DAT
    LEFT JOIN
        CTE_PC
        ON DAT.CAMP_ID = CTE_PC.CAMP_ID
    WHERE
        DAT.REPORTING_DATE >= '2020-01-01'
        AND (COALESCE(DAT.IMPRESSIONS, 0) + COALESCE(DAT.NET_REVENUE_EURO, 0)) > 0
        AND DAT.ODIN_CUSTOMER_ID NOT IN (2, 4) --2=Advertising Services, 4=Strategy & Brand
    GROUP BY
        DAT.REPORTING_DATE, DAT.CAMP_ID
    ------------------
    UNION ALL
    ------------------
    --Bing/Microsoft Audience Network --> OK!
    SELECT
        DAT.DATE_COL AS REPORTING_DATE
        , FIRST_VALUE(COALESCE(CTE_PC.CHANNEL, 'Display Advertising')) AS CHANNEL
        , COALESCE(ADG.CAMP_ID, DAT.CAMP_ID) AS CAMP_ID
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_CODE) AS PLANNING_CONTEXT_CODE
        , FIRST_VALUE(CTE_PC.PLANNING_CONTEXT_NAME) AS PLANNING_CONTEXT_NAME
        , '${EXAENV}_BIWC_SERVICE_CAMPAIGNDATA_PROV.MPC_BING_AD_PERFORMANCE_REPORT' AS SOURCE_SYSTEM
        , SUM(DAT.IMPRESSIONS) AS IMPRESSIONS
        , SUM(DAT.CLICKS) AS CLICKS
        , SUM(DAT.COST_EURO) AS COST_EURO
    FROM
        PRD_BIWA_ONLINEMARKETINGSTEUERUNG.CAMPAIGNDATA_MPC_BING_AD_PERFORMANCE_REPORT AS DAT
        --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_BING_AD_PERFORMANCE_REPORT AS DAT
    LEFT JOIN
        (
            SELECT DISTINCT
                DATE_COL
                , BING_ACCOUNT_ID
                , BING_ADGROUP_ID
                , CAMP_ID
            FROM
                PRD_BIWA_ONLINEMARKETINGSTEUERUNG.CAMPAIGNDATA_MPC_BING_ADGROUP_PERFORMANCE_REPORT
                --${EXAENV}_BIWD_ONLINEMARKETINGSTEUERUNG_CONS.CAMPAIGNDATA_MPC_BING_ADGROUP_PERFORMANCE_REPORT
            WHERE
                CAMP_ID IS NOT NULL
                AND BING_ACCOUNT_ID = 180481972
        ) AS ADG
        ON DAT.BING_ADGROUP_ID = ADG.BING_ADGROUP_ID
        AND DAT.DATE_COL = ADG.DATE_COL
        AND DAT.BING_ACCOUNT_ID = ADG.BING_ACCOUNT_ID
    LEFT JOIN
        CTE_PC
        ON CTE_PC.CAMP_ID = COALESCE(ADG.CAMP_ID, DAT.CAMP_ID)
    WHERE
        DAT.DATE_COL >= '2020-01-01'
        AND (COALESCE(DAT.IMPRESSIONS, 0) + COALESCE(DAT.COST_EURO, 0) + COALESCE(DAT.CLICKS, 0)) > 0
        AND DAT.BING_ACCOUNT_ID = 180481972
    GROUP BY
        DAT.DATE_COL, LOCAL.CAMP_ID
)
;
